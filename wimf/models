#!/usr/bin/env python

class GeoLocation:
    tablename = "__geo_location__"
    id = Column(Integer, primary_key=True)
    name = Column(String, default="")
    gps = Column(String, default="")

class BackUpVault:
    tablename = "__backup_vault__"
    id = Column(Integer, primary_key=True)
    url = Column(String, nullable=False)
    name = Column(String, default="")
    geolocation = Column(Integer, ForeignKey(Geolocation.id))
    price = Column(Numeric, default=0)
    encrypted_tars = relationship("EncryptedTar", backref="backup_vault")

class Keyword:
    tablename = "__keyword__"
    id = Column(Integer, primary_key=True)
    keyword = Column(String, nullable=False)

class GpgKey:
    tablename = "__gpg_key__"
    privatekey_id = Column(String, primary_key=True)
 
class EncryptedTar:
    tablename = "__encrypted_tar__"
    id = Column(Integer, primary_key=True)
    backup_vault = Column(Integer, ForeignKey(BackUpVault.id))
    gpg_keys = Column(Integer, ForeignKey(GpgKey.id))
    timestamp = Column(DateTime, nullable=False)

class Hierarchy:
    tablename = "__hierarchy__"
    id = Column(Integer, primary_key=True)
    owner = Column(String)
    timestamp = Column(DateTime, nullable=False)
    duration = Column(DateTime)
    geolocation = Column(Integer, ForeignKey(GeoLocation.id))
    keywords = Column(Integer, ForeignKey(Keywords.id))
    path = Column(String nullable=False)

class BackUpFile:
    tablename = "__backup_file__"
    id = Column(Integer, primary_key=True)
    parent = relationship("Hierarchy", backref="backup_file")
    encrypted_tar = relationship("EncryptedTar", backref="backup_file")
    keywords = Column(Integer, (ForeignKey(Keywords.id))
    geolocation = Column(Integer, (ForeignKey(GeoLocation.id))
    extension = Column(String)
    timestamp = Column(DateTime)
    resolution = Column(String)
    md5sum = Column(String)
    filename = Colmun(String, nullable=False)



