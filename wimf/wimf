#!/usr/bin/env python

import pdb
import sys
import argparse
import commands
import models
import parsers

def get_command(command_name):
    for attrname in dir(commands):
        
        if "Add" not in attrname and "List" not in attrname \
                                and "Append" not in attrname\
                                and "Delete" not in attrname\
                                and "Update" not in attrname:
            continue
        attr = getattr(commands, attrname)
        
        if hasattr(attr, "command_name"):
            
            if attr.command_name == command_name:
                
                return attr
    return None

def get_parser(command_target):
    for attrname in dir(parsers):
        if "Keyword" not in attrname and "GeoLocation" not in attrname\
                                    and "GpgKey" not in attrname\
                                    and "Vault" not in attrname\
                                    and "Belt" not in attrname\
                                    and "Tree" not in attrname\
                                    and "Entity" not in attrname:
            continue
        attr = getattr(parsers, attrname)
        if hasattr(attr, "parser_name"):
            if attr.parser_name == command_target:
                return attr
    return None

# get the first and second argument to build the command_name
parser = argparse.ArgumentParser(description="Usage=%prog")
parser.add_argument('command_action', nargs=1, 
                choices=["add", "update", "list", "find" ],
                help="action to perform on db (add, list...)")
parser.add_argument('command_target', nargs=1,
                choices=["keyword", "gpgkey", "geolocation", 
                        "vault", "belt", "tree", "entity" ],
                            help="on which tables of db the command acts")
(namespace, args) = parser.parse_known_args(sys.argv[1:])

command_name = namespace.command_action[0] + " " + namespace.command_target[0]

# let's retrieve the right parser command

ParserClass = get_parser(namespace.command_target[0])
prs = ParserClass()
options = prs.parse_args(command_name, args)

CommandClass = get_command(command_name)
cmd = CommandClass()
cmd.run(options)
